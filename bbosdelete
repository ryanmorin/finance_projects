import os

# Define file paths and names as constants
FOLDER_PATH = '/XXXXX/'
INPUT_PATH = '/clean_inventory/'
GREATER_DATE_FILE = 'xx.csv'
LESSER_DATE_FILE = 'xxx.csv'
DEPRECIATION_FILE = 'xxxx.csv'


def read_and_clean_dataframe(file_path):
    """
    Read and clean a DataFrame from a CSV file.
    """
    df = pd.read_csv(file_path)

    # Convert date columns to datetime format with mixed format inference
    date_columns = ['as_of_date', 'location_date']
    df[date_columns] = df[date_columns].apply(pd.to_datetime, format='mixed', dayfirst=True, errors='coerce')

    return df


def change_depreciation(greater_df):
    # for those purchase_type = rental items that are fully depreciated fill in the depreciation amounts
    def fill_values(row):
        if pd.isnull(row['beginning_value']) and row['purchase_type'] == 'rental':
            row['beginning_value'] = row['cost'] * 0.17
            row['ending_value'] = row['cost'] * 0.17
            row['monthly_depreciation'] = 0
            row['total_depreciation'] = row['cost'] * 0.83
        elif pd.isnull(row['beginning_value']): # items where the purchase_type is not rental but is null
            row['beginning_value'] = row['cost']
            row['ending_value'] = row['cost']
            row['monthly_depreciation'] = 0
            row['total_depreciation'] = 0
        return row
    greater_df = greater_df.apply(fill_values, axis=1)

    # Convert specific columns to numeric --> if encounter ',' then remove it (regex)
    numeric_columns = ['beginning_value', 'ending_value', 'monthly_depreciation', 'total_depreciation']
    greater_df[numeric_columns] = greater_df[numeric_columns].replace(',', '', regex=True).apply(pd.to_numeric)

    return greater_df


def main():
    # Read and clean DataFrames
    greater_date_df = read_and_clean_dataframe(os.path.join(FOLDER_PATH, GREATER_DATE_FILE))
    lesser_date_df = read_and_clean_dataframe(os.path.join(FOLDER_PATH, LESSER_DATE_FILE))

    # Define a function to filter and merge DataFrames
    def clean_and_merge_data(greater_df, lesser_df):
        # ... (your clean_and_merge_data function)
        mask = (
                ((lesser_df['location'] == 'consignment_expired') & (greater_df['location'] == 'consignment_expired')) |
                ((lesser_df['location'] == 'customer_theft') & (greater_df['location'] == 'customer_theft')) |
                ((lesser_df['location'] == 'lost_at_warehouse') & (greater_df['location'] == 'lost_at_warehouse')) |
                ((lesser_df['location'] == 'lost_by_customer') & (greater_df['location'] == 'lost_by_customer')) |
                ((lesser_df['location'] == 'lost_by_ups') & (greater_df['location'] == 'lost_by_ups')) |
                ((lesser_df['location'] == 'permanently_grounded') & (
                            greater_df['location'] == 'permanently_grounded')) |
                ((lesser_df['location'] == 'promotional_giveaway') & (
                            greater_df['location'] == 'promotional_giveaway')) |
                ((lesser_df['location'] == 'purchased') & (greater_df['location'] == 'purchased')) |
                ((lesser_df['location'] == 'receiving_error_does_not_exist') & (greater_df['location'] ==
                                                                                'receiving_error_does_not_exist')) |
                ((lesser_df['location'] == 'recouped') & (greater_df['location'] == 'recouped')) |
                ((lesser_df['location'] == 'retired') & (greater_df['location'] == 'purchased')) |
                ((lesser_df['location'] == 'retired') & (greater_df['location'] == 'retired')) |
                ((lesser_df['location'] == 'returned_to_vendor') & (greater_df['location'] == 'returned_to_vendor')) |
                ((lesser_df['location'] == 'stolen') & (greater_df['location'] == 'stolen')) |
                ((lesser_df['location'] == 'moved_to_outlet') & (greater_df['location'] == 'moved_to_outlet')) |
                ((lesser_df['location'] == 'moved_to_rental') & (greater_df['location'] == 'moved_to_rental')) |
                ((lesser_df['location'].isnull()) & (greater_df['location'] == 'permanently_grounded')) |
                ((lesser_df['location'].isnull()) & (greater_df['location'] == 'purchased')) |
                ((lesser_df['location'].isnull()) & (greater_df['location'] == 'receiving_error_does_not_exist')) |
                ((lesser_df['location'].isnull()) & (greater_df['location'] == 'returned_to_vendor')) &
                ((greater_df['as_of_date'] - lesser_df['location_date']).dt.days > 6 * 30)
        )

        # Apply the mask to the DataFrames to delete rows
        greater_df = greater_df[~greater_df['unique_inventory_id'].isin(lesser_df.loc[mask, 'unique_inventory_id'])]
        lesser_df = lesser_df[~mask]

        return greater_df, lesser_df

    # Delete the old inventory and merge the DataFrames
    cleaned_greater_date_df, cleaned_lesser_date_df = clean_and_merge_data(greater_date_df, lesser_date_df)

    # Add new columns to the resulting dataframes and add depreciation data to the greatest
    dep_df = pd.read_csv(os.path.join(INPUT_PATH, DEPRECIATION_FILE))
    print(dep_df.columns)
    dep_df = dep_df[['asset_id', 'beginning_value', 'ending_value', 'monthly_depreciation', 'total_depreciation']]

    # Perform a left join on 'asset_id'
    cleaned_greater_date_df = cleaned_greater_date_df.merge(dep_df, on='asset_id', how='left')

    # Fill in missing depreciation values --> where originally a rental and not in depreciation schedule 83% of cost RT
    #cleaned_greater_date_df = change_depreciation(cleaned_greater_date_df)

    # Define cleaned file names
    cleaned_greater_date_file = GREATER_DATE_FILE.replace('_cleaned.csv', '_greater_current.csv')
    cleaned_lesser_date_file = LESSER_DATE_FILE.replace('_cleaned.csv', '_lesser_current.csv')

    # Reset index for cleaned_lesser_date_df after applying the mask
    cleaned_lesser_date_df = cleaned_lesser_date_df.reset_index(drop=True)

    # Save the cleaned DataFrames to CSV files
    cleaned_greater_date_df.to_csv(os.path.join(FOLDER_PATH, cleaned_greater_date_file), index=False)
    cleaned_lesser_date_df.to_csv(os.path.join(FOLDER_PATH, cleaned_lesser_date_file), index=False)

    print("Files cleaned and saved successfully.")

if __name__ == "__main__":
    main()
